- hosts: win2016-compute,win2016-cinder

  vars_files:
    - zuul-params.yaml

  tasks:
    - name: Include variables from group_vars/windows
      include_vars: "group_vars/windows"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/devstack
      include_vars: "group_vars/devstack"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/devstack-{{ zuul_project | basename }}
      include_vars: "group_vars/devstack-{{ zuul_project | basename }}"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/devstack-{{ zuul_project | basename }}-{{ job_type }}
      include_vars: "group_vars/devstack-{{ zuul_project | basename }}-{{ job_type }}"
      when: job_type is defined
      failed_when: False
      tags: always

    - name: Include variables from group_vars/devstack-{{ zuul_project | basename }}-{{ network_type }}
      include_vars: "group_vars/devstack-{{ zuul_project | basename }}-{{ network_type }}"
      when: network_type is defined and job_type is not defined
      failed_when: False
      tags: always

    - name: Include variables from group_vars/win2016-compute
      include_vars: "group_vars/win2016-compute"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/win2016-compute-{{ zuul_project | basename }}
      include_vars: "group_vars/win2016-compute-{{ zuul_project | basename }}"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/win2016-compute-{{ zuul_project | basename }}-{{ job_type }}
      include_vars: "group_vars/win2016-compute-{{ zuul_project | basename }}-{{ job_type }}"
      when: job_type is defined
      failed_when: False
      tags: always

    - name: Include variables from group_vars/win2016-compute-{{ zuul_project | basename }}-{{ network_type }}
      include_vars: "group_vars/win2016-compute-{{ zuul_project | basename }}-{{ network_type }}"
      when: network_type is defined and job_type is not defined
      failed_when: False
      tags: always

    - name: Include variables from job_vars/{{ zuul_project | basename }}
      include_vars: "job_vars/{{ zuul_project | basename }}"
      failed_when: False
      tags: always

    - name: Include variables from job_vars/{{ zuul_project | basename }}-{{ job_type }}
      include_vars: "job_vars/{{ zuul_project | basename }}-{{ job_type }}"
      when: job_type is defined
      failed_when: False
      tags: always

    - name: Include variables from job_vars/{{ zuul_project | basename }}-{{ network_type }}
      include_vars: "job_vars/{{ zuul_project | basename }}-{{ network_type }}"
      when: job_type is not defined and network_type is defined
      failed_when: False
      tags: always

    - name: Add collect-event-log powershell script and fe configs
      win_template:
        src: "windows/{{ item }}"
        dest: "C:\\{{ item }}"
      with_items: ["eventlogcss.txt", "eventlogjs.txt", "collect-event-log.ps1"]
      failed_when: False

    - name: Execute collect-event-log script
      win_shell: "C:\\collect-event-log.ps1"
      failed_when: False

    - name: Copy cloudinit logs in log dir
      win_copy:
        src: "C:\\Program Files\\Cloudbase Solutions\\Cloudbase-Init\\log\\{{ item }}"
        dest: "{{ win_dir.log }}\\{{ item }}"
        remote_src: yes
      with_items: ["cloudbase-init.log", "cloudbase-init-unattend.log"]
      failed_when: False

    - name: Copy cloudinit logs in log dir
      win_copy:
        src: "C:\\Program Files\\Cloudbase Solutions\\Open vSwitch\\logs\\{{ item }}"
        dest: "{{ win_dir.log }}\\{{ item }}"
        remote_src: yes
      with_items: ["ovsdb-server.log", "ovs-vswitchd.log"]
      failed_when: False

    - name: Get log files
      shell: |
        if [ ! -d "{{ item.value.dest }}" ];then
            mkdir -p "{{ item.value.dest }}"
        fi
        smbclient "//{{ inventory_hostname }}/C\$" -c "prompt OFF; cd {{ item.value.src }}" -U "administrator%Passw0rd"
        if [ $? -ne 0 ];then
            echo "Folder {{ item.value.src }} does not exists"
        else
            smbclient "//{{ inventory_hostname }}/C\$" -c "prompt OFF; recurse ON; lcd {{ item.value.dest }}; cd {{ item.value.src }}; mget *" -U "administrator%Passw0rd"
        fi
      args:
        executable: /bin/bash
      with_dict:
        log:
          dest: "{{ log_path }}/windows/logs/{{ hostname }}"
          src: '\openstack\log'
      ignore_errors: True
      delegate_to: 127.0.0.1

    - name: Get config files
      shell: |
        if [ ! -d "{{ item.value.dest }}" ];then
            mkdir -p "{{ item.value.dest }}"
        fi
        smbclient "//{{ inventory_hostname }}/C\$" -c "prompt OFF; cd {{ item.value.src }}" -U "administrator%Passw0rd"
        if [ $? -ne 0 ];then
            echo "Folder {{ item.value.src }} does not exists"
        else
            smbclient "//{{ inventory_hostname }}/C\$" -c "prompt OFF; recurse ON; lcd {{ item.value.dest }}; cd {{ item.value.src }}; mget *" -U "administrator%Passw0rd"
        fi
      args:
        executable: /bin/bash
      with_dict:
        log:
          dest: "{{ log_path }}/windows/confs/{{ hostname }}"
          src: '\openstack\etc'
      ignore_errors: True
      delegate_to: 127.0.0.1

